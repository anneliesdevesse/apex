1 Prerequisities

1.1. Libraries

portaudio >= 0.19
xerces >= 2.7
xalan >= 1.10
qt >= 4.3

2 Compilation and installation

2.1. Compilation on Linux

Install the necessary development packages for the libraries. Running 
    qmake && make && make install 
should be enough to get you going. If not, file a bug and assign it to 
michael.hofmann@med.kuleuven.be.

2.1.1. Required development packages on ubuntu

To install the required development packages on ubuntu, run the following
command:
    sudo aptitude install qt4-dev-tools libjack-dev portaudio19-dev libxerces27-dev libxalan110-dev chrpath

2.1.2. Required development packages on fedora


2.2. Compilation on Windows

If you take the path of least resistance, define a directory layout like the following:

/
  /apex3
  /api
    /qt4
    /xalan
    /xerces
    /portaudio
    /asio (optional)
    /nucleus (optional)
    /fftw3 (optional)
    /sndfile (optional)

Get, compile and install the Qt 4.x library (www.trolltech.com) according to
their instructions. Make sure the appropriate build tools (qmake, uic, moc) are
in the path:
- set the visual studio environment variables by running the vcvars32.bat
    file if necessary
- run qconfigure
- wait :-)

Get, compile and install the xerces-c library
(http://xml.apache.org/xerces-c/download.cgi). Put it into the /api/xerces
directory or define the path in localconfig.pri (see below):
- Make sure you compile with /Zc:wchar_t-. To make this a bit easier, use the
  following with Cygwin:
  sed -i 's/PreprocessorDefinitions/TreatWChar_tAsBuiltInType="false" &/' \
      $(grep -Rl PreprocessorDefinitions path/to/xerces/Projects/Win32/VC...)
- If you use VS 2008 Express, go to C:\Program Files\Microsoft
  SDKs\Windows\v6.0A\Include and copy WinResrc.h to winres.h

Get, compile and install the xalan-c library (http://xml.apache.org/xalan-c/;
http://www.apache.org/dyn/closer.cgi/xml/xalan-c). Put it into the /api/xalan
directory or define the path in localconfig.pri (see below).
- Make sure you compile with /Zc:wchar_t-. To make this a bit easier, use the
  following with Cygwin:
  sed -i 's/PreprocessorDefinitions/TreatWChar_tAsBuiltInType="false" &/' \
      $(grep -Rl PreprocessorDefinitions path/to/xerces/Projects/Win32/VC...)
  sed -i 's/^CPP_PROJ=/&\/Zc:wchar_t- /' \
      $(grep -Rl '^CPP_PROJ'  path/to/xerces/Projects/Win32/VC...)
- The MsgCreator stuff needs the multithreading library:
  sed -i 's/^\/ML/\/MD/' \
      $(grep -Rl '^CPP_PROJ'  path/to/xerces/Projects/Win32/VC...)
- add _HAS_ITERATOR_DEBUGGING=0 to the preprocessor symbols for AllInOne
- remove AllInOne.rc from the project

Get, compile and install the portaudio library version v19, 
(http://www.portaudio.com/). Put it into the /api/portaudio directory or define
the path in localconfig.pri (see below).
- Delete all folders except wmme from source files->hostapi
- Remove the PaAsio lines from portaudio.def
- Add PA_NO_DS and PA_NO_ASIO to the preprocessor symbols for the project

Get, and install the asio sources 
(http://www.steinberg.de/329+M52087573ab0.html). Put it into the /api/portaudio
directory or define the path in localconfig.pri (see below).

Do something similar with the nucleus stuff, fftw3 and sndfile.

Checkout the apex source code into /apex and run qmake. If it worked, you will
see a listing of the found dependencies. If there is something missing although
you installed it, see below.

Run nmake. This should not fail if the qmake step worked. Otherwise file a bug
and assign it to michael.hofmann@med.kuleuven.be.

You can find a project file for VS.NET that calls nmake in
/apex/build/projects.

2.3. Compilation on windows using Mingw

There seems to be an error in the qt build system that results in the 
path and filename of the qt tools (such as moc) not being concatenated
correctly. It can be solved by changing line 96 of qmake.conf in the 
mingw makespec (called win32-g++) and changing it to:

QMAKE_MOC		= $$[QT_INSTALL_BINS]/moc.exe
QMAKE_UIC		= $$[QT_INSTALL_BINS]/uic.exe
QMAKE_IDC		= $$[QT_INSTALL_BINS]/idc.exe

3 Build system

APEX uses a small build system with modular dependencies. A dependency is
defined in a file in /apex/clebs/. They consist of two blocks:

  # Checks whether the dependency is available and adds the name to
  # CLEBS_DEPENDENCIES. Most paths are taken from a qmake variable that can be
  # defined in localconfig.pro.
  clebsCheck(fftw3) {
    win32 {
      isEmpty(FFTW3ROOT):FFTW3ROOT = $$BASEDIR/../api/fftw3
      exists($${FFTW3ROOT}):CLEBS_DEPENDENCIES += fftw3
    }
    unix {
      system(pkg-config fftw3):CLEBS_DEPENDENCIES += fftw3
    }
  }

  # Modifies the necessary qmake variables so that the program links against
  # the right libraries, finds the includes etc.
  clebsDependency(fftw3) {
    win32 {
      INCLUDEPATH += $${FFTW3ROOT}
      LIBS += -L$${FFTW3ROOT} -llibfftw3-3
    }
    unix {
      PKGCONFIG += fftw3
    }
  }

A qmake .pro file that uses the build system need to look a bit like this:

  # Path to main clebs.pri
  BASEDIR = ../..
  # Needed modules
  CLEBS += xalan xerces portaudio jack streamapp pch
  # Include the build system configurations
  include ($$BASEDIR/clebs.pri)

  TARGET = ...
  SOURCES += ...
  HEADERS += ...

The qmake definitions in clebs.pri do all the magic and include the neccessary
snippets from /apex/clebs/. You can define some variables that alter the
compile process (change dependency paths, no precompiled headers, release mode)
in localconfig.pri (you can copy it from localconfig-template.pri if it does
not exist).

If you get a message that a dependency was not found, first check
localconfig.pri whether there is a variable that can be defined to locate the
dependency correctly. Otherwise, take a look at the clebs definition in
/apex/clebs/*/dependency.pri to see if you can figure out whats wrong. If you
installed the dependency correctly and it is not possible to solve the problem
with some definitions in localconfig.pri, fix it yourself along the lines
described here (please do not modify clebs.pri) or file a bug and assign it to
michael.hofmann@med.kuleuven.be.
